//Помнить про глобальные и локальные переменные, переменные с одинаковыми именами в разных областях разные!!!

console.log('Пример первый: Локальные и глобальные переменные с одинаковым именем')

let a
let b 

function myFirstFn() {
    let b //лучше объявлять новые переменные, как здесь, не меняя глобальные
    a = true
    b = 10
    console.log(b)
}

myFirstFn()

console.log(a) //Переменная a поменяла значение, так как она была объявлена в глобальной области видимости, 
//но не в локальной, соотвественно меняла она своё значение так же в рамках глоабльной области (ищем её там, так  как вызов myFn так же происходит в глобальной области)
console.log(b)

console.log('Пример второй: Цепочка областей видимости')

const p = 5

function mySecondFn() {
    function innerFn() { //Внутренняя функция, каждый раз при вызове главной будет объявляться новая переменная innerFN, значением которой будет функция
        console.log(p)
    }
    innerFn()
}

mySecondFn()
//innerFn() выдаст ошибку даже после запуска главной функции, так как сама функция является локальной переменной главной функции

console.log('ТИПЫ ОБЛАСТЕЙ ВИДИМОСТИ: ГЛОБАЛЬНАЯ, ФУНКЦИИ, БЛОКА \nПример')

//Про блок: Переменные, объявленные с помощью let или const внутри блока, фигурных скобок, имеют область видимости внутри этих скобок

function myThirdFn() {
    a=true
    console.log(a)
}

myThirdFn()
console.log(a)

//В примере выше переменные не объявлены нигде, так делать не рекомендуется, ибо нарушается область видимости (код выполнится, а будет в глобальной области, но написано плохо!!!)

 console.log('Для включения строгого режима нужно в начале программы написать use strict в одинарных кавычках')
 //'use strict' запрещает использование необъявленных переменных