//Промисы

//Промисы позволяют обрабатывать отложенные во времени события, например, нужно послать запрос на удалённый сервер и получить от него ответ, не зная, когда ответит сервер.
//Необходимо ожидать ответ сервера, но при этом выполняя другие действия
//Во FrontEnd приложении необходим вариант именно параллельного ожидания, чтобы интерактивность не потерялась
//Мы должны использовать асинхронный запрос

//Промис - обещание предоставить результат ПОЗЖЕ

//Промис может вернуть ОШИБКУ, если результат предоставить НЕВОЗМОЖНО

//Три состояния: ожидание (создан), исполнен (результат получен), отклонён (ошибка)

//Создание, (промис - это объект)

const myPromise = new Promise((resolve, reject) => { //Новый экземпляр класса Promise, конструктору мы передаёмв качестве аргумента колбэк функцию с параметрами resolve и reject
    /**
     * Выполнение асинхронных действий
     * 
     * Внутри этой функции нужно в результате вызвать
     одну из функций resolve или reject
     */
});

//Вновь созданный промис будет в состоянии pending (ожидание)
//Если был вызван resolve - значит исполнен
//Если вышла ошибка, вызывается reject и промис отклонён

//Получение результата промиса:

myPromise
 .then(value => {
    /**
     * Действия в случае успешного исполнения Промиса
     * Значение value - значение, переданное в вызове функции resolve внутри Промиса
     */
 })
 .catch(error => {
    /**
     * Действия в случае отклонения Промиса
     * Значение error - это значение, переданное в вызове функции reject внутри Промиса
     */
 })

 //Иными словами, в then на вход получаем данные, которые приходят при исполнении промиса, то есть из resolve, а в catch при отклонении, то есть с reject

 //Для удобства лучше писать вызовы данных методов на разных строчках, начиная с точки

 //Реальный ПРИМЕР!!!

 fetch('https://jsonplaceholder.typicode.com/todos') //Получение данных с помощью fetch api, доступна только в веб-браузере
  .then(response => response.json())
   //json возвращает Промис, поэтому дальше ещё один .then
  .then(json => console.log(json))
  .catch(error => console.error(error))

  //jsonplaceholder - бесплатная фейковая API для тестирования и прототипирования
  //fetch возвращает Промис
  //node js не поддерживает fetch()

  //Можем изменить ссылку, добавив /1, чтобы получить только один объект