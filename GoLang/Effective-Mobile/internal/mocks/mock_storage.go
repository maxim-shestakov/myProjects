// Code generated by MockGen. DO NOT EDIT.
// Source: Effective-Mobile/internal/db (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	db "Effective-Mobile/internal/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddCar mocks base method.
func (m *MockStorage) AddCar(arg0 db.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCar indicates an expected call of AddCar.
func (mr *MockStorageMockRecorder) AddCar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCar", reflect.TypeOf((*MockStorage)(nil).AddCar), arg0)
}

// AddOwner mocks base method.
func (m *MockStorage) AddOwner(arg0 db.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwner", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOwner indicates an expected call of AddOwner.
func (mr *MockStorageMockRecorder) AddOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwner", reflect.TypeOf((*MockStorage)(nil).AddOwner), arg0)
}

// DeleteCar mocks base method.
func (m *MockStorage) DeleteCar(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockStorageMockRecorder) DeleteCar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockStorage)(nil).DeleteCar), arg0)
}

// GetCars mocks base method.
func (m *MockStorage) GetCars() ([]db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCars")
	ret0, _ := ret[0].([]db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCars indicates an expected call of GetCars.
func (mr *MockStorageMockRecorder) GetCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCars", reflect.TypeOf((*MockStorage)(nil).GetCars))
}

// UpdateCar mocks base method.
func (m *MockStorage) UpdateCar(arg0 db.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockStorageMockRecorder) UpdateCar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockStorage)(nil).UpdateCar), arg0)
}
